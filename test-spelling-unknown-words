#!/bin/bash
# This CI acceptance test is based on:
# https://github.com/jsoref/spelling/tree/04648bdc63723e5cdf5cbeaff2225a462807abc8
# It is conceptually `f` which runs `w` (spelling-unknown-word-splitter)
# plus `fchurn` which uses `dn` mostly rolled together.
set -e
if [ -n "$DEBUG" ]; then
  set -x
fi

now() {
  date +'%s%N'
}
start=$(now)
spellchecker=${spellchecker:-/app}
temp='/tmp/spelling'
dict="$temp/english.words"
whitelist_path="$spellchecker/whitelist.words.txt"
excludelist_path="$spellchecker/excludes.txt"
word_splitter="$spellchecker/spelling-unknown-word-splitter.pl"
run_output="$spellchecker/unknown.words.txt"
run_files="$temp/reporter-input.txt"
run_warnings="$temp/matcher.txt"
wordlist=$bucket/english.words.txt

if [ -z "$bucket" ]; then
  if [ -z "$1" ]; then
    echo "$0 requires "'$bucket be set to your bucket (gs://your-project-bucket-path)' >&2
    exit 1
  fi
  bucket=$1
  shift
fi
if [ -z "$project" ]; then
  if [ -z "$1" ]; then
    echo "$0 requires "'$project to be set to your project' >&2
    exit 1
  fi
  project=$1
  shift
fi

project_file_path() {
  echo $bucket/$project/$1.txt
}

get_project_files() {
  file=$1
  dest=$2
  if [ ! -e "$dest" ]; then
    from=$(project_file_path $file)
    echo "Retrieving cached $file from $from"
    case "$from" in
      gs://*)
        gsutil cp -Z $from $dest >/dev/null 2>/dev/null;;
      *://*)
        curl -L -s "$from" -o "$dest";;
    esac
  fi
}
get_project_files whitelist $whitelist_path
get_project_files excludes $excludelist_path

if [ -n "$debug" ]; then
  echo "Clean up from previous run"
fi
rm -f "$run_output"

echo "Checking spelling..."
if [ -n "$DEBUG" ]; then
  echo 'Excluded paths:'
  cat "$excludelist_path"
fi

xargs_zero() {
  if [ $(uname) = "Linux" ]; then
    xargs --no-run-if-empty -0 "$@"
  else
    args="$*" "$spellchecker/xargs_zero"
  fi
}
(git 'ls-files' -z 2> /dev/null) |\
  "$spellchecker/exclude.pl" |\
  xargs_zero "$word_splitter" |\
  "$word_splitter" |\
  perl -p -n -e 's/ \(.*//' > "$run_output"
  word_splitter_status="${PIPESTATUS[2]} ${PIPESTATUS[3]}"
  if [ "$word_splitter_status" != '0 0' ]; then
    echo "$word_splitter failed ($word_splitter_status)"
    exit 2
  fi

printDetails() {
  echo ''
  echo 'If you are ok with the output of this run, you will need to'
}

to_retrieve_whitelist() {
  case "$bucket" in
    gs://*)
      echo gsutil cp -Z $(project_file_path whitelist) whitelist.txt;;
    *://*)
      echo curl -L -s "$(project_file_path whitelist)" -o whitelist.txt;;
    *)
      echo cp "$(project_file_path whitelist)" whitelist.txt;;
  esac
}
to_publish_whitelist() {
  case "$bucket" in
    gs://*)
      echo gsutil cp -Z whitelist.txt $(project_file_path whitelist);;
    *://*)
      echo "# command to publish is not known. URL: $(project_file_path whitelist)";;
    *)
      echo cp whitelist.txt $(project_file_path whitelist);;
  esac
}

spelling_warning() {
  OUTPUT="$OUTPUT$spelling_header"
  OUTPUT="$OUTPUT
#### $1:
"
  spelling_body "$2" "$3"
  OUTPUT="$OUTPUT$spelling_footer"
  comment
}
spelling_info() {
  OUTPUT="$OUTPUT$spelling_header"
  if [ -z "$2" ]; then
    out="$1"
  else
    out="$1

$2"
  fi
  spelling_body "$out" "$3"
  OUTPUT="$OUTPUT$spelling_footer"
  comment
}
spelling_body() {
  err="$2"
  if [ -z "$err" ]; then
    OUTPUT="$1"
  else
    OUTPUT="$OUTPUT
$1

#### To accept these changes, run the following commands:
(They can be run anywhere with permissions to update the bucket.)

"'```'"
$err
"'```'
  fi
}
new_words() {
  echo "$1" | perl -ne 'next unless s/^\+//;print'
}
bullet_words() {
  echo "$1" | perl -pne 's/^(.)/* $1/'
  rm -f "$run_warnings"
  export tokens="$1"
  if [ -z "$ONLY_REPORT_HEAD" ] && !git log HEAD^ 2>/dev/null >/dev/null; then
    ONLY_REPORT_HEAD=1
  fi
  if [ -z "$ONLY_REPORT_HEAD" ]; then
    rm -f "$run_files"
    export with_blame=1
    git diff-tree --no-commit-id --name-only -r HEAD -z 2> /dev/null |
    "$spellchecker/exclude.pl" |
    xargs_zero git blame -b -f -s HEAD^..HEAD -- > "$run_files"
    $spellchecker/reporter.pl < "$run_files" > "$run_warnings.raw"
    rm -f "$run_files"
  else
    git ls-files -z 2> /dev/null |
    "$spellchecker/exclude.pl" | xargs_zero $spellchecker/reporter.pl > "$run_warnings.raw"
  fi
  if [ -s "$run_warnings.raw" ]; then
    (
      echo "::add-matcher::.git/reporter.json"
      cat "$run_warnings.raw"
      echo "::remove-matcher owner=jsoref-spelling::"
      cp $spellchecker/reporter.json .git/
    ) > "$run_warnings"
    rm -f "$run_warnings.raw"
  fi
}

quit() {
  if [ -n "$junit" ]; then
    exit
  fi
  exit $1
}

comment() {
  if [ -n "$OUTPUT" ]; then
    echo "Preparing a comment"
    PAYLOAD=$(echo '{}' | jq --arg body "$OUTPUT" '.body = $body')
    if [ -n "$GITHUB_EVENT_PATH" ]; then
      COMMENTS_URL=$(cat $GITHUB_EVENT_PATH | jq -r .pull_request.comments_url)
    fi
    if [ -n "$COMMENTS_URL" ] && [ -z "${COMMENTS_URL##*:*}" ]; then
      echo $PAYLOAD
      echo $COMMENTS_URL
      curl -s -S -H "Authorization: token $GITHUB_TOKEN" --header "Content-Type: application/json" --data "$PAYLOAD" "$COMMENTS_URL" > /dev/null
    else
      echo "$OUTPUT"
    fi
  fi
  if [ -e "$run_warnings" ]; then
    cat "$run_warnings"
    rm -f "$run_warnings"
  fi
}

if [ ! -e "$whitelist_path" ]; then
  title="No preexisting $whitelist_path file"
  instructions=$(
    echo 'cat > '"$whitelist_path"' <<EOF=EOF'
    cat "$run_output"
    echo EOF=EOF
    to_publish_whitelist
  )
      spelling_info "$title" "$(bullet_words "$(cat "$run_output")")" "$instructions"
  quit 2
fi
sorted_whitelist="$temp/$(basename $whitelist_path)"
(sort -u -f "$whitelist_path" | grep . || true) > "$sorted_whitelist"
whitelist_path="$sorted_whitelist"

diff_output=$(diff -U0 "$whitelist_path" "$run_output" |grep -v "$spellchecker" || true)

if [ -z "$diff_output" ]; then
  title="No new words with misspellings found"
      spelling_info "$title" "There are currently $(wc -l $whitelist_path|sed -e 's/ .*//') whitelisted items." ""
  quit 0
fi

new_output=$(diff -i -U0 "$whitelist_path" "$run_output" |grep -v "$spellchecker" |\
  perl -n -w -e 'next unless /^\+/; next if /^\+{3} /; s/^.//; print;')

make_instructions() {
  patch_remove=$(echo "$diff_output" | perl -ne 'next unless s/^-([^-])/$1/; print')
  patch_add=$(echo "$diff_output" | perl -ne 'next unless s/^\+([^+])/$1/; print')
  to_retrieve_whitelist
  echo "$(
  echo '('
  if [ -n "$patch_remove" ]; then
    echo 'egrep -v "$(echo "'"$patch_remove"'" | tr "\n" " " | perl -pne '"'"'s/^/^(/;s/\s$/)\$/;s/\s/|/g'"'"')" whitelist.txt;'
  else
    echo 'cat whitelist.txt;'
  fi
  if [ -n "$patch_add" ]; then
    echo 'echo "'
    echo "$patch_add"
    echo '"'
  fi
  echo ') | sort -u -f > new_whitelist.txt && mv new_whitelist.txt whitelist.txt'
)"
  to_publish_whitelist
}

if [ -z "$new_output" ]; then
  title='There are now fewer misspellings than before'
  instructions=$(
    make_instructions
  )
      spelling_info "$title" "$(bullet_words "$(new_words "$diff_output")")" "$instructions"
  quit
fi
title='New misspellings found, please review'
instructions=$(
  make_instructions
)
    spelling_warning "$title" "$(bullet_words "$new_output")" "$instructions"
quit 1
